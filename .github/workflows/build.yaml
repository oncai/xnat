name: Build

env:
  # The version is either the published tag name (ie. 1.2.3) when run as a part of a release build, or the SHA
  # of the final commit of a merged pull request.
  VERSION: ${{ github.event_name == 'release' && github.event.release.tag_name || format('1.8.9.1-{0}', github.sha) }}

on:
  push:
    branches: [ 1.8.9.1-ocm ]
  pull_request:
    branches: [ 1.8.9.1-ocm ]
    types:
      - opened
      - reopened
      - synchronize
      - closed
  release:
    branches: [ 1.8.9.1-ocm ]
    types:
      - published

jobs:
  all:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build Devcontainer
        run: docker build -t builder -f .devcontainer/Dockerfile .

      - name: Setup shared local Maven repo
        run: mkdir m2

      # Apply various patches to `xnat-data-models` and rebuild. The artifact is published to a
      # local m2 repository which will be shared with the XNAT build. The XNAT build searches
      # the local m2 repository first as a part of its build, picking up our patched .jar

      - name: xnat-data-models - clone/patch/build
        run: |
          git clone --branch 1.8.9.1 https://bitbucket.org/xnatdev/xnat-data-models.git
          cd xnat-data-models
          git config user.name "admin-ci"
          git config user.email "admin@onc.ai"
          git am ../oncai/patches/xnat-data-models/0001-XNAT-7943-Remove-deprecated-display-doc-fields.patch
          docker run -t --rm --workdir=/code -v $(pwd):/code -v $(pwd)/../m2:/root/.m2 builder ./gradlew clean jar publishToMavenLocal

      - name: Build
        run: |
          echo "org.gradle.jvmargs=-Xmx4096m" > ./gradle.properties
          find m2
          docker run -t --rm --workdir=/code -v $(pwd):/code -v $(pwd)/m2:/root/.m2 builder ./gradlew build

      - name: Test
        run: docker run -t --rm --workdir=/code -v $(pwd):/code builder ./gradlew test

      - name: Package
        run: docker run -t --rm --workdir=/code -v $(pwd):/code builder ./gradlew war

      - name: Rename
        id: rename
        run: |
          docker run -t --rm --workdir=/code/build/libs -v $(pwd):/code builder \
            bash -c 'filename=$(basename -- $(ls *.war)); mv -- *.war "${filename%-*}-${{ env.VERSION }}.war"'
          echo "FILENAME=$(basename $(ls build/libs/*.war))" >> "${GITHUB_OUTPUT}"

      - name: Upload Release Asset
        if: ${{ github.event_name == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run:
          gh release upload ${{ github.event.release.tag_name }} build/libs/${{ steps.rename.outputs.FILENAME }}
